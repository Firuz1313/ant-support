import { query, transaction } from '../utils/database.js';

const generateId = () => {
  return Date.now().toString(36) + Math.random().toString(36).substr(2);
};

const createTimestamp = () => {
  return new Date().toISOString();
};

export const createTestData = async (req, res) => {
  try {
    console.log('üß™ Creating test data...');
    
    await transaction(async (client) => {
      // Create test problems (using SERIAL ID, so no ID specified)
      const problems = [
        {
          device_id: 'hdbox',
          title: '–ù–µ—Ç —Å–∏–≥–Ω–∞–ª–∞',
          description: '–ù–∞ —ç–∫—Ä–∞–Ω–µ —Ç–µ–ª–µ–≤–∏–∑–æ—Ä–∞ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è —Å–æ–æ–±—â–µ–Ω–∏–µ "–ù–µ—Ç —Å–∏–≥–Ω–∞–ª–∞" –∏–ª–∏ —á–µ—Ä–Ω—ã–π —ç–∫—Ä–∞–Ω',
          category: 'critical',
          icon: 'Monitor',
          color: 'from-red-500 to-red-600',
          tags: ['—Å–∏–≥–Ω–∞–ª', '—ç–∫—Ä–∞–Ω', '—á–µ—Ä–Ω—ã–π —ç–∫—Ä–∞–Ω'],
          priority: 5,
          estimated_time: 10,
          difficulty: 'beginner',
          success_rate: 95,
          status: 'published'
        },
        {
          device_id: 'hdbox',
          title: '–ü—É–ª—å—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç',
          description: '–ü—É–ª—å—Ç –¥–∏—Å—Ç–∞–Ω—Ü–∏–æ–Ω–Ω–æ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–µ —Ä–µ–∞–≥–∏—Ä—É–µ—Ç –Ω–∞ –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–æ–∫',
          category: 'moderate',
          icon: 'Radio',
          color: 'from-orange-500 to-orange-600',
          tags: ['–ø—É–ª—å—Ç', '–±–∞—Ç–∞—Ä–µ–π–∫–∏', '—É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ'],
          priority: 3,
          estimated_time: 5,
          difficulty: 'beginner',
          success_rate: 90,
          status: 'published'
        },
        {
          device_id: 'hdbox',
          title: '–ù–µ—Ç –∑–≤—É–∫–∞',
          description: '–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –µ—Å—Ç—å, –Ω–æ –∑–≤—É–∫ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –Ω–∞ –≤—Å–µ—Ö –∫–∞–Ω–∞–ª–∞—Ö',
          category: 'moderate',
          icon: 'VolumeX',
          color: 'from-blue-500 to-blue-600',
          tags: ['–∑–≤—É–∫', '–∞—É–¥–∏–æ', 'mute'],
          priority: 4,
          estimated_time: 8,
          difficulty: 'beginner',
          success_rate: 85,
          status: 'published'
        }
      ];

      const createdProblems = [];
      for (const problem of problems) {
        const problemData = {
          ...problem,
          tags: JSON.stringify(problem.tags), // Convert array to JSON string for PostgreSQL
          is_active: true,
          created_at: createTimestamp(),
          updated_at: createTimestamp()
        };

        const columns = Object.keys(problemData);
        const values = Object.values(problemData);
        const placeholders = columns.map((_, index) => `$${index + 1}`);

        const result = await client.query(
          `INSERT INTO problems (${columns.join(', ')}) VALUES (${placeholders.join(', ')}) RETURNING *`,
          values
        );
        
        createdProblems.push(result.rows[0]);
        console.log(`‚úÖ Created problem: ${problem.title}`);
      }

      // Create test steps for the first problem
      if (createdProblems.length > 0) {
        const firstProblem = createdProblems[0];
        
        const steps = [
          {
            problem_id: firstProblem.id,
            device_id: 'hdbox',
            step_number: 1,
            title: '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∫–∞–±–µ–ª–µ–π',
            description: '–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—Å–µ –∫–∞–±–µ–ª–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ',
            instruction: '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ HDMI –∏–ª–∏ AV –∫–∞–±–µ–ª—è –º–µ–∂–¥—É –ø—Ä–∏—Å—Ç–∞–≤–∫–æ–π –∏ —Ç–µ–ª–µ–≤–∏–∑–æ—Ä–æ–º. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –∫–∞–±–µ–ª—å –ø–ª–æ—Ç–Ω–æ –≤—Å—Ç–∞–≤–ª–µ–Ω –≤ —Ä–∞–∑—ä–µ–º—ã.',
            estimated_time: 60,
            hint: '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ç–∫–ª—é—á–∏—Ç—å –∏ —Å–Ω–æ–≤–∞ –ø–æ–¥–∫–ª—é—á–∏—Ç—å –∫–∞–±–µ–ª—å',
            success_text: '–ö–∞–±–µ–ª–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ'
          },
          {
            problem_id: firstProblem.id,
            device_id: 'hdbox',
            step_number: 2,
            title: '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–∏—Ç–∞–Ω–∏–µ –ø—Ä–∏—Å—Ç–∞–≤–∫–∏',
            description: '–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –ø—Ä–∏—Å—Ç–∞–≤–∫–∞ –≤–∫–ª—é—á–µ–Ω–∞ –∏ –ø–æ–ª—É—á–∞–µ—Ç –ø–∏—Ç–∞–Ω–∏–µ',
            instruction: '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø–∏—Ç–∞–Ω–∏—è –Ω–∞ –ø—Ä–∏—Å—Ç–∞–≤–∫–µ –≥–æ—Ä–∏—Ç. –ï—Å–ª–∏ –Ω–µ –≥–æ—Ä–∏—Ç, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –±–ª–æ–∫–∞ –ø–∏—Ç–∞–Ω–∏—è.',
            estimated_time: 30,
            hint: '–ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –æ–±—ã—á–Ω–æ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –Ω–∞ –ø–µ—Ä–µ–¥–Ω–µ–π –ø–∞–Ω–µ–ª–∏',
            success_text: '–ü—Ä–∏—Å—Ç–∞–≤–∫–∞ –ø–æ–ª—É—á–∞–µ—Ç –ø–∏—Ç–∞–Ω–∏–µ'
          }
        ];

        for (const step of steps) {
          const stepData = {
            ...step,
            is_active: true,
            created_at: createTimestamp(),
            updated_at: createTimestamp()
          };

          const columns = Object.keys(stepData);
          const values = Object.values(stepData);
          const placeholders = columns.map((_, index) => `$${index + 1}`);

          await client.query(
            `INSERT INTO diagnostic_steps (${columns.join(', ')}) VALUES (${placeholders.join(', ')})`,
            values
          );
          
          console.log(`‚úÖ Created step: ${step.title}`);
        }
      }

      // Create some test sessions
      for (let i = 0; i < 5; i++) {
        const sessionData = {
          device_id: 'hdbox',
          problem_id: createdProblems[0]?.id || 1,
          session_id: generateId(),
          start_time: new Date(Date.now() - Math.random() * 24 * 60 * 60 * 1000).toISOString(),
          end_time: new Date().toISOString(),
          total_steps: 2,
          completed_steps: Math.random() > 0.3 ? 2 : 1,
          success: Math.random() > 0.2,
          duration: Math.floor(Math.random() * 300) + 60,
          user_agent: 'Mozilla/5.0 (Test Browser)',
          ip_address: `192.168.1.${Math.floor(Math.random() * 254) + 1}`,
          is_active: true,
          created_at: createTimestamp(),
          updated_at: createTimestamp()
        };

        const columns = Object.keys(sessionData);
        const values = Object.values(sessionData);
        const placeholders = columns.map((_, index) => `$${index + 1}`);

        await client.query(
          `INSERT INTO diagnostic_sessions (${columns.join(', ')}) VALUES (${placeholders.join(', ')})`,
          values
        );
      }
      
      console.log(`‚úÖ Created 5 test sessions`);
    });

    console.log('üéâ Test data created successfully!');
    
    res.json({
      success: true,
      message: 'Test data created successfully',
      data: {
        problems: 3,
        steps: 2,
        sessions: 5
      }
    });
  } catch (error) {
    console.error('‚ùå Error creating test data:', error);
    res.status(500).json({
      success: false,
      message: 'Failed to create test data',
      error: error.message
    });
  }
};

export default {
  createTestData
};
