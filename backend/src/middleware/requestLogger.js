import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è IP –∞–¥—Ä–µ—Å–∞ –∫–ª–∏–µ–Ω—Ç–∞
const getClientIP = (req) => {
  return req.ip || 
         req.connection?.remoteAddress || 
         req.socket?.remoteAddress ||
         req.headers['x-forwarded-for']?.split(',')[0] ||
         req.headers['x-real-ip'] ||
         'unknown';
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ —Ç–µ–ª–∞ –∑–∞–ø—Ä–æ—Å–∞
const getRequestSize = (req) => {
  const contentLength = req.headers['content-length'];
  return contentLength ? parseInt(contentLength) : 0;
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ –≤ —á–µ–ª–æ–≤–µ–∫–æ-—á–∏—Ç–∞–µ–º–æ–º –≤–∏–¥–µ
const formatBytes = (bytes) => {
  if (bytes === 0) return '0 B';
  const k = 1024;
  const sizes = ['B', 'KB', 'MB', 'GB'];
  const i = Math.floor(Math.log(bytes) / Math.log(k));
  return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
};

// –§—É–Ω–∫—Ü–∏—è –∑–∞–ø–∏—Å–∏ –ª–æ–≥–∞ –≤ —Ñ–∞–π–ª
const writeLogToFile = (logEntry) => {
  if (process.env.LOG_LEVEL === 'none' || process.env.NODE_ENV === 'test') {
    return;
  }
  
  const logDir = path.join(__dirname, '../../logs');
  
  // –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É logs –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
  if (!fs.existsSync(logDir)) {
    fs.mkdirSync(logDir, { recursive: true });
  }
  
  const logFile = path.join(logDir, 'access.log');
  
  try {
    fs.appendFileSync(logFile, JSON.stringify(logEntry) + '\n');
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ –ª–æ–≥ —Ñ–∞–π–ª –¥–æ—Å—Ç—É–ø–∞:', error.message);
  }
};

// –û—Å–Ω–æ–≤–Ω–æ–π middleware –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤
const requestLogger = (req, res, next) => {
  const startTime = Date.now();
  const timestamp = new Date().toISOString();
  
  // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞
  req.id = `req_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
  
  // –õ–æ–≥–∏—Ä—É–µ–º –Ω–∞—á–∞–ª–æ –∑–∞–ø—Ä–æ—Å–∞ –≤ development —Ä–µ–∂–∏–º–µ
  if (process.env.NODE_ENV === 'development' && process.env.DEBUG_ROUTES === 'true') {
    console.log(`üîÑ ${req.method} ${req.url} - ${getClientIP(req)} [${req.id}]`);
  }
  
  // –ü–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ res.end
  const originalEnd = res.end;
  const originalSend = res.send;
  const originalJson = res.json;
  
  let responseSize = 0;
  
  // –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º res.end –¥–ª—è –∑–∞—Ö–≤–∞—Ç–∞ —Ä–∞–∑–º–µ—Ä–∞ –æ—Ç–≤–µ—Ç–∞
  res.end = function(chunk, encoding) {
    if (chunk && typeof chunk !== 'function') {
      responseSize += Buffer.byteLength(chunk, encoding || 'utf8');
    }
    originalEnd.call(this, chunk, encoding);
  };
  
  // –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º res.send
  res.send = function(body) {
    if (body) {
      responseSize += Buffer.byteLength(JSON.stringify(body), 'utf8');
    }
    originalSend.call(this, body);
  };
  
  // –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º res.json
  res.json = function(obj) {
    if (obj) {
      responseSize += Buffer.byteLength(JSON.stringify(obj), 'utf8');
    }
    originalJson.call(this, obj);
  };
  
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞
  res.on('finish', () => {
    const endTime = Date.now();
    const duration = endTime - startTime;
    const clientIP = getClientIP(req);
    const requestSize = getRequestSize(req);
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–≤–µ—Ç –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞ –≤ –∫–æ–Ω—Å–æ–ª–∏
    let statusColor = '';
    if (res.statusCode >= 200 && res.statusCode < 300) {
      statusColor = '\x1b[32m'; // –∑–µ–ª–µ–Ω—ã–π
    } else if (res.statusCode >= 300 && res.statusCode < 400) {
      statusColor = '\x1b[33m'; // –∂–µ–ª—Ç—ã–π
    } else if (res.statusCode >= 400 && res.statusCode < 500) {
      statusColor = '\x1b[31m'; // –∫—Ä–∞—Å–Ω—ã–π
    } else if (res.statusCode >= 500) {
      statusColor = '\x1b[35m'; // –ø—É—Ä–ø—É—Ä–Ω—ã–π
    }
    
    // –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –ª–æ–≥–∞
    const logEntry = {
      timestamp,
      requestId: req.id,
      method: req.method,
      url: req.url,
      status: res.statusCode,
      duration: `${duration}ms`,
      clientIP,
      userAgent: req.headers['user-agent'] || 'unknown',
      referer: req.headers.referer || '-',
      requestSize: formatBytes(requestSize),
      responseSize: formatBytes(responseSize),
      contentType: res.getHeader('content-type') || '-'
    };
    
    // –õ–æ–≥–∏—Ä—É–µ–º –≤ –∫–æ–Ω—Å–æ–ª—å
    if (process.env.NODE_ENV === 'development') {
      console.log(
        `${statusColor}%s\x1b[0m %s %s - %s %s [%s]`,
        res.statusCode,
        req.method,
        req.url,
        duration + 'ms',
        clientIP,
        req.id
      );
    } else {
      // –í –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –±–æ–ª–µ–µ –∫–æ–º–ø–∞–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
      console.log(
        `${timestamp} - ${req.method} ${req.url} ${res.statusCode} ${duration}ms - ${clientIP}`
      );
    }
    
    // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ —Ñ–∞–π–ª –ª–æ–≥–∞
    writeLogToFile(logEntry);
    
    // –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–∞–µ–º –æ –º–µ–¥–ª–µ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–∞—Ö
    if (duration > 1000) {
      console.warn(`‚ö†Ô∏è  –ú–µ–¥–ª–µ–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å: ${req.method} ${req.url} - ${duration}ms`);
    }
    
    // –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–∞–µ–º –æ –±–æ–ª—å—à–∏—Ö –æ—Ç–≤–µ—Ç–∞—Ö
    if (responseSize > 1024 * 1024) { // > 1MB
      console.warn(`‚ö†Ô∏è  –ë–æ–ª—å—à–æ–π –æ—Ç–≤–µ—Ç: ${req.method} ${req.url} - ${formatBytes(responseSize)}`);
    }
  });
  
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
  res.on('error', (error) => {
    console.error(`üö® –û—à–∏–±–∫–∞ –æ—Ç–≤–µ—Ç–∞ –¥–ª—è ${req.method} ${req.url}:`, error.message);
    
    const logEntry = {
      timestamp: new Date().toISOString(),
      requestId: req.id,
      method: req.method,
      url: req.url,
      error: error.message,
      clientIP: getClientIP(req),
      userAgent: req.headers['user-agent'] || 'unknown'
    };
    
    writeLogToFile(logEntry);
  });
  
  next();
};

export default requestLogger;
