import fs from "fs";
import path from "path";
import { fileURLToPath } from "url";

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

// –§—É–Ω–∫—Ü–∏—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –æ—à–∏–±–æ–∫ –≤ —Ñ–∞–π–ª
const logError = (error, req) => {
  const logDir = path.join(__dirname, "../../logs");

  // –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É logs –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
  if (!fs.existsSync(logDir)) {
    fs.mkdirSync(logDir, { recursive: true });
  }

  const logFile = path.join(logDir, "error.log");
  const timestamp = new Date().toISOString();

  const logEntry = {
    timestamp,
    method: req?.method,
    url: req?.url,
    userAgent: req?.headers?.["user-agent"],
    ip: req?.ip || req?.connection?.remoteAddress,
    error: {
      name: error.name,
      message: error.message,
      stack: error.stack,
    },
  };

  try {
    fs.appendFileSync(logFile, JSON.stringify(logEntry) + "\n");
  } catch (logErr) {
    console.error("–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ –ª–æ–≥ —Ñ–∞–π–ª:", logErr.message);
  }
};

// –û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
const errorHandler = (error, req, res, next) => {
  // –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
  console.error("üö® –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞:", error.message);

  if (process.env.NODE_ENV === "development") {
    console.error("Stack trace:", error.stack);
  }

  // –õ–æ–≥–∏—Ä—É–µ–º –≤ —Ñ–∞–π–ª
  logError(error, req);

  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø ÔøΩÔøΩ—à–∏–±–∫–∏ –∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π —Å—Ç–∞—Ç—É—Å –∫–æ–¥
  let statusCode = 500;
  let message = "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞";
  let errorType = "INTERNAL_ERROR";

  if (error.name === "ValidationError") {
    statusCode = 400;
    message = "–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö";
    errorType = "VALIDATION_ERROR";
  } else if (error.name === "CastError") {
    statusCode = 400;
    message = "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö";
    errorType = "CAST_ERROR";
  } else if (error.code === "23505") {
    // PostgreSQL unique violation
    statusCode = 409;
    message = "–ó–∞–ø–∏—Å—å —Å —Ç–∞–∫–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç";
    errorType = "DUPLICATE_ERROR";
  } else if (error.code === "23503") {
    // PostgreSQL foreign key violation
    statusCode = 400;
    message = "–ù–∞—Ä—É—à–µ–Ω–∏–µ —Å–≤—è–∑–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö";
    errorType = "FOREIGN_KEY_ERROR";
  } else if (error.code === "23502") {
    // PostgreSQL not null violation
    statusCode = 400;
    message = "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ";
    errorType = "NOT_NULL_ERROR";
  } else if (error.message.includes("jwt")) {
    statusCode = 401;
    message = "–û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏";
    errorType = "AUTH_ERROR";
  } else if (
    error.message.includes("permission") ||
    error.message.includes("access")
  ) {
    statusCode = 403;
    message = "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞";
    errorType = "PERMISSION_ERROR";
  } else if (error.message.includes("not found")) {
    statusCode = 404;
    message = "–†–µ—Å—É—Ä—Å –Ω–µ –Ω–∞–π–¥–µ–Ω";
    errorType = "NOT_FOUND_ERROR";
  }

  // –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –æ–± –æ—à–∏–±–∫–µ
  const errorResponse = {
    success: false,
    error: message,
    errorType,
    timestamp: new Date().toISOString(),
    requestId:
      req.id || `req_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,
  };

  // –í —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –¥–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
  if (process.env.NODE_ENV === "development") {
    errorResponse.debug = {
      originalMessage: error.message,
      stack: error.stack,
      code: error.code,
    };
  }

  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
  res.status(statusCode).json(errorResponse);
};

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ 404 –æ—à–∏–±–æ–∫
export const notFoundHandler = (req, res) => {
  const error = {
    success: false,
    error: "–ú–∞—Ä—à—Ä—É—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω",
    errorType: "NOT_FOUND",
    path: req.path,
    method: req.method,
    timestamp: new Date().toISOString(),
  };

  console.warn(`‚ö†Ô∏è  404 - –ú–∞—Ä—à—Ä—É—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω: ${req.method} ${req.path}`);
  res.status(404).json(error);
};

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö Promise rejection
export const handleUnhandledRejection = () => {
  process.on("unhandledRejection", (reason, promise) => {
    console.error("üö® –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ Promise:", reason);

    // –õ–æ–≥–∏—Ä—É–µ–º –≤ —Ñ–∞–π–ª
    logError(new Error(`Unhandled Promise Rejection: ${reason}`), null);

    // –í –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –º–æ–∂–Ω–æ –∑–∞–≤–µ—Ä—à–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å
    if (process.env.NODE_ENV === "production") {
      console.log("üîÑ –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–∞ –∏–∑-–∑–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–π –æ—à–∏–±–∫–∏...");
      process.exit(1);
    }
  });
};

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –∏—Å–∫–ª—é—á–µ–Ω–∏–π
export const handleUncaughtException = () => {
  process.on("uncaughtException", (error) => {
    console.error("üö® –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ:", error.message);
    console.error("Stack trace:", error.stack);

    // –õ–æ–≥–∏—Ä—É–µ–º –≤ —Ñ–∞–π–ª
    logError(error, null);

    // –ó–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å
    console.log("üîÑ –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–∞ –∏–∑-–∑–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–π –æ—à–∏–±–∫–∏...");
    process.exit(1);
  });
};

export default errorHandler;
