import {
  TVInterface,
  CreateTVInterfaceData,
  UpdateTVInterfaceData,
  TVInterfaceFilters,
  TVInterfaceApiResponse,
  TVInterfaceListResponse,
} from "@/types/tvInterface";

// –ë–∞–∑–æ–≤—ã–π URL –¥–ª—è API
const API_BASE_URL = "/api/v1/tv-interfaces";

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫
const withRetry = async <T>(
  fn: () => Promise<T>,
  maxRetries: number = 3,
  delay: number = 1000,
): Promise<T> => {
  let lastError: Error;

  for (let attempt = 1; attempt <= maxRetries; attempt++) {
    try {
      return await fn();
    } catch (error) {
      lastError = error as Error;

      // –ï—Å–ª–∏ —ç—Ç–æ —Å–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞ –∏ –Ω–µ –ø–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞, –ø–æ–≤—Ç–æ—Ä—è–µ–º
      if (
        error instanceof TypeError &&
        error.message.includes("Failed to fetch") &&
        attempt < maxRetries
      ) {
        console.warn(
          `üîÑ Retry attempt ${attempt}/${maxRetries} after ${delay}ms delay...`,
        );
        await new Promise((resolve) => setTimeout(resolve, delay * attempt));
        continue;
      }

      // –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ —Å–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞ –∏–ª–∏ –ø–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞, –ø—Ä–µ–∫—Ä–∞—â–∞–µ–º
      throw error;
    }
  }

  throw lastError!;
};

// Helper —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è HTTP –∑–∞–ø—Ä–æ—Å–æ–≤
const apiRequest = async <T>(
  endpoint: string,
  options: RequestInit = {},
): Promise<T> => {
  const url = `${API_BASE_URL}${endpoint}`;

  const defaultOptions: RequestInit = {
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
    timeout: 30000, // 30 —Å–µ–∫—É–Ω–¥
    ...options,
  };

  try {
    // –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–ª–∞–¥–æ—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
    console.log(`üîÑ API Request: ${options.method || "GET"} ${url}`);

    const response = await fetch(url, defaultOptions);

    console.log(`‚úÖ API Response: ${response.status} for ${url}`);

    if (!response.ok) {
      let errorData: any = {};
      try {
        errorData = await response.json();
      } catch {
        errorData = {
          error: `HTTP ${response.status}: ${response.statusText}`,
        };
      }

      const errorMessage =
        errorData.error ||
        errorData.message ||
        `HTTP error! status: ${response.status} (${response.statusText})`;
      console.error(`‚ùå API Error: ${errorMessage} for ${url}`);
      throw new Error(errorMessage);
    }

    const data = await response.json();
    console.log(`üì¶ API Data received for ${url}:`, {
      size: JSON.stringify(data).length,
    });
    return data;
  } catch (error) {
    if (
      error instanceof TypeError &&
      error.message.includes("Failed to fetch")
    ) {
      console.error(`üåê Network Error for ${url}:`, {
        message: error.message,
        name: error.name,
        stack: error.stack,
        url,
        options: defaultOptions,
      });
      throw new Error(
        `–°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞: –ù–µ —É–¥–∞–µ—Ç—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ.`,
      );
    }

    console.error(`üí• API Request failed for ${url}:`, {
      error: error.message,
      type: error.constructor.name,
      url,
      options: defaultOptions,
    });
    throw error;
  }
};

// –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ query –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
const buildQueryParams = (params: Record<string, any>): string => {
  const searchParams = new URLSearchParams();

  Object.entries(params).forEach(([key, value]) => {
    if (value !== undefined && value !== null && value !== "") {
      searchParams.append(key, String(value));
    }
  });

  const queryString = searchParams.toString();
  return queryString ? `?${queryString}` : "";
};

// TV Interface API service
export const tvInterfacesAPI = {
  // –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ TV –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã
  async getAll(filters?: TVInterfaceFilters): Promise<TVInterfaceListResponse> {
    try {
      const queryParams = buildQueryParams(filters || {});
      const response = await withRetry(() =>
        apiRequest<TVInterfaceListResponse>(`${queryParams}`),
      );

      return {
        success: true,
        data: response.data || [],
      };
    } catch (error) {
      return {
        success: false,
        error:
          error instanceof Error
            ? error.message
            : "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫ÔøΩÔøΩ TV –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–≤",
      };
    }
  },

  // –ü–æ–ª—É—á–∏—Ç—å TV –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –ø–æ ID
  async getById(id: string): Promise<TVInterfaceApiResponse> {
    try {
      if (!id) {
        return {
          success: false,
          error: "ID TV –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω",
        };
      }

      const response = await apiRequest<TVInterfaceApiResponse>(`/${id}`);

      return {
        success: true,
        data: response.data,
      };
    } catch (error: any) {
      let errorMessage = "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ TV –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞";
      let suggestion = "";
      let availableIds: string[] = [];

      if (error instanceof Error) {
        errorMessage = error.message;
      }

      // Try to extract additional error information from API response
      if (error.response?.data) {
        errorMessage = error.response.data.error || errorMessage;
        suggestion = error.response.data.suggestion || "";
        availableIds = error.response.data.availableIds || [];
      }

      return {
        success: false,
        error: errorMessage,
        suggestion,
        availableIds,
      };
    }
  },

  // –ü–æ–ª—É—á–∏—Ç—å TV –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã –ø–æ deviceId
  async getByDeviceId(deviceId: string): Promise<TVInterfaceListResponse> {
    try {
      if (!deviceId) {
        return {
          success: false,
          error: "ID —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω",
        };
      }

      const response = await withRetry(() =>
        apiRequest<TVInterfaceListResponse>(`/device/${deviceId}`),
      );

      return {
        success: true,
        data: response.data || [],
      };
    } catch (error) {
      return {
        success: false,
        error:
          error instanceof Error
            ? error.message
            : "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ TV –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–≤ –¥–ª—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞",
      };
    }
  },

  // –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π TV –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
  async create(data: CreateTVInterfaceData): Promise<TVInterfaceApiResponse> {
    try {
      // –í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–∞ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–µ
      if (!data.name?.trim()) {
        return {
          success: false,
          error: "–ù–∞–∑–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ",
        };
      }

      if (!data.type) {
        return {
          success: false,
          error: "–¢–∏–ø –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω",
        };
      }

      if (!data.deviceId) {
        return {
          success: false,
          error: "–í—ã–±–µ—Ä–∏—Ç–µ —ÉÔøΩÔøΩ—Ç—Ä–æ–π—Å—Ç–≤–æ",
        };
      }

      // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞ –±—ç–∫–µ–Ω–¥
      const requestData = {
        name: data.name.trim(),
        description: data.description?.trim() || "",
        type: data.type,
        device_id: data.deviceId,
        screenshot_data: data.screenshotData,
        clickable_areas: data.clickableAreas || [],
        highlight_areas: data.highlightAreas || [],
      };

      const response = await apiRequest<TVInterfaceApiResponse>("", {
        method: "POST",
        body: JSON.stringify(requestData),
      });

      return {
        success: true,
        data: response.data,
        message: response.message || "TV –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω",
      };
    } catch (error) {
      return {
        success: false,
        error:
          error instanceof Error
            ? error.message
            : "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ TV –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞",
      };
    }
  },

  // –û–±–Ω–æ–≤–∏—Ç—å TV –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
  async update(
    id: string,
    data: UpdateTVInterfaceData,
  ): Promise<TVInterfaceApiResponse> {
    try {
      if (!id) {
        return {
          success: false,
          error: "ID TV –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –æ–±—è–∑–∞ÔøΩÔøΩ–µ–ª–µ–Ω",
        };
      }

      // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞ –±—ç–∫–µ–Ω–¥
      const requestData: Record<string, any> = {};

      if (data.name !== undefined) requestData.name = data.name.trim();
      if (data.description !== undefined)
        requestData.description = data.description?.trim() || "";
      if (data.type !== undefined) requestData.type = data.type;
      if (data.deviceId !== undefined) requestData.device_id = data.deviceId;
      if (data.screenshotData !== undefined)
        requestData.screenshot_data = data.screenshotData;
      if (data.clickableAreas !== undefined)
        requestData.clickable_areas = data.clickableAreas;
      if (data.highlightAreas !== undefined)
        requestData.highlight_areas = data.highlightAreas;
      if (data.isActive !== undefined) requestData.is_active = data.isActive;

      const response = await apiRequest<TVInterfaceApiResponse>(`/${id}`, {
        method: "PUT",
        body: JSON.stringify(requestData),
      });

      return {
        success: true,
        data: response.data,
        message: response.message || "TV –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω",
      };
    } catch (error) {
      return {
        success: false,
        error:
          error instanceof Error
            ? error.message
            : "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ TV –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞",
      };
    }
  },

  // –£–¥–∞–ª–∏—Ç—å TV –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
  async delete(id: string): Promise<TVInterfaceApiResponse> {
    try {
      if (!id) {
        return {
          success: false,
          error: "ID TV –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω",
        };
      }

      const response = await apiRequest<TVInterfaceApiResponse>(`/${id}`, {
        method: "DELETE",
      });

      return {
        success: true,
        message: response.message || "TV –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω",
      };
    } catch (error) {
      return {
        success: false,
        error:
          error instanceof Error
            ? error.message
            : "–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ TV –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞",
      };
    }
  },

  // –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å/–¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å TV –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
  async toggleStatus(id: string): Promise<TVInterfaceApiResponse> {
    try {
      if (!id) {
        return {
          success: false,
          error: "ID TV –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω",
        };
      }

      const response = await apiRequest<TVInterfaceApiResponse>(
        `/${id}/toggle`,
        {
          method: "PATCH",
        },
      );

      return {
        success: true,
        data: response.data,
        message: response.message || "–°—Ç–∞—Ç—É—Å TV –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –∏–∑–º–µ–Ω–µ–Ω",
      };
    } catch (error) {
      return {
        success: false,
        error:
          error instanceof Error
            ? error.message
            : "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ TV –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞",
      };
    }
  },

  // –î—É–±–ª–∏—Ä–æ–≤–∞—Ç—å TV –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
  async duplicate(
    id: string,
    newName?: string,
  ): Promise<TVInterfaceApiResponse> {
    try {
      if (!id) {
        return {
          success: false,
          error: "ID TV –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω",
        };
      }

      const requestData = newName ? { name: newName } : {};

      const response = await apiRequest<TVInterfaceApiResponse>(
        `/${id}/duplicate`,
        {
          method: "POST",
          body: JSON.stringify(requestData),
        },
      );

      return {
        success: true,
        data: response.data,
        message: response.message || "TV –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å —É—Å–ø–µ—à–Ω–æ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω",
      };
    } catch (error) {
      return {
        success: false,
        error:
          error instanceof Error
            ? error.message
            : "–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–∏ TV –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞",
      };
    }
  },

  // –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É TV –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–≤
  async getStats(): Promise<TVInterfaceApiResponse> {
    try {
      const response = await apiRequest<TVInterfaceApiResponse>("/stats");

      return {
        success: true,
        data: response.data,
      };
    } catch (error) {
      return {
        success: false,
        error:
          error instanceof Error
            ? error.message
            : "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ TV –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–≤",
      };
    }
  },

  // –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å TV –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
  async export(id: string): Promise<TVInterfaceApiResponse> {
    try {
      if (!id) {
        return {
          success: false,
          error: "ID TV –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω",
        };
      }

      const response = await apiRequest<TVInterfaceApiResponse>(
        `/${id}/export`,
      );

      return {
        success: true,
        data: response.data,
        message: response.message || "TV –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å —É—Å–ø–µ—à–Ω–æ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω",
      };
    } catch (error) {
      return {
        success: false,
        error:
          error instanceof Error
            ? error.message
            : "–û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ TV –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞",
      };
    }
  },
};

export default tvInterfacesAPI;
