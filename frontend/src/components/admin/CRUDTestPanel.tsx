import React, { useState } from 'react';
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Textarea } from "@/components/ui/textarea";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { Badge } from "@/components/ui/badge";
import { useDevices } from "@/hooks/useDevices";
import { useProblems } from "@/hooks/useProblems";
import { Plus, Edit, Trash2, CheckCircle, AlertCircle } from "lucide-react";

const CRUDTestPanel: React.FC = () => {
  const [testResults, setTestResults] = useState<string[]>([]);
  const [isLoading, setIsLoading] = useState(false);
  
  const { data: devicesData } = useDevices(1, 10);
  const { data: problemsData } = useProblems(1, 10);
  
  const devices = devicesData?.data || [];
  const problems = problemsData?.data || [];

  const addTestResult = (message: string) => {
    setTestResults(prev => [...prev, `${new Date().toLocaleTimeString()}: ${message}`]);
  };

  const testDeviceOperations = async () => {
    setIsLoading(true);
    addTestResult("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ CRUD –æ–ø–µ—Ä–∞—Ü–∏–π –¥–ª—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤...");

    try {
      // –¢–µ—Å—Ç CREATE (—Å–æ–∑–¥–∞–Ω–∏–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞)
      const createData = {
        id: `test-device-${Date.now()}`,
        name: `–¢–µ—Å—Ç–æ–≤–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ ${Date.now()}`,
        brand: "TestBrand",
        model: "TestModel",
        description: "–¢–µ—Å—Ç–æ–≤–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ CRUD –æ–ø–µ—Ä–∞—Ü–∏–π",
        color: "from-green-500 to-green-600"
      };

      const createResponse = await fetch('/api/v1/devices', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(createData)
      });

      if (createResponse.ok) {
        const created = await createResponse.json();
        addTestResult(`‚úÖ CREATE —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: ${created.data?.name}`);
        
        // –¢–µ—Å—Ç UPDATE (–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞)
        const updateData = {
          description: "–û–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"
        };

        const updateResponse = await fetch(`/api/v1/devices/${created.data.id}`, {
          method: 'PUT',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify(updateData)
        });

        if (updateResponse.ok) {
          addTestResult(`‚úÖ UPDATE —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: ${created.data.id}`);
        } else {
          const updateError = await updateResponse.json();
          addTestResult(`‚ùå UPDATE failed: ${updateError.error}`);
        }

        // –¢–µ—Å—Ç DELETE (—É–¥–∞–ª–µ–Ω–∏–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞)
        const deleteResponse = await fetch(`/api/v1/devices/${created.data.id}`, {
          method: 'DELETE'
        });

        if (deleteResponse.ok) {
          addTestResult(`‚úÖ DELETE —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: ${created.data.id}`);
        } else {
          const deleteError = await deleteResponse.json();
          addTestResult(`‚ùå DELETE failed: ${deleteError.error}`);
        }

      } else {
        const createError = await createResponse.json();
        addTestResult(`‚ùå CREATE failed: ${createError.error}`);
      }

    } catch (error) {
      addTestResult(`‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤: ${error}`);
    }

    setIsLoading(false);
  };

  const testProblemOperations = async () => {
    setIsLoading(true);
    addTestResult("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ CRUD –æ–ø–µ—Ä–∞—Ü–∏–π –¥–ª—è –ø—Ä–æ–±–ª–µ–º...");

    if (devices.length === 0) {
      addTestResult("‚ùå –ù–µ—Ç —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–±–ª–µ–º");
      setIsLoading(false);
      return;
    }

    try {
      // –¢–µ—Å—Ç CREATE (—Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã) - –ø—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã
      const problemData = {
        device_id: devices[0].id,
        title: `–¢–µ—Å—Ç–æ–≤–∞—è –ø—Ä–æ–±–ª–µ–º–∞ ${Date.now()}`,
        description: "–¢–µ—Å—Ç–æ–≤–∞—è –ø—Ä–æ–±–ª–µ–º–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ CRUD –æ–ø–µ—Ä–∞—Ü–∏–π",
        category: "moderate",
        status: "published",
        priority: 1,
        estimated_time: 5
      };

      // –ü—Ä–æ–±—É–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —ç–Ω–¥–ø–æ–∏–Ω—Ç
      let createResponse = await fetch('/api/v1/problems', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(problemData)
      });

      if (!createResponse.ok) {
        addTestResult(`‚ö†Ô∏è –û—Å–Ω–æ–≤–Ω–æ–π —ç–Ω–¥–ø–æ–∏–Ω—Ç failed, –ø—Ä–æ–±—É–µ–º /new`);
        
        // –ü—Ä–æ–±—É–µ–º –Ω–æ–≤—ã–π —ç–Ω–¥–ø–æ–∏–Ω—Ç
        createResponse = await fetch('/api/v1/problems/new', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify(problemData)
        });
      }

      if (createResponse.ok) {
        const created = await createResponse.json();
        addTestResult(`‚úÖ CREATE –ø—Ä–æ–±–ª–µ–º–∞: ${created.data?.title}`);
      } else {
        const createError = await createResponse.json();
        addTestResult(`‚ùå CREATE –ø—Ä–æ–±–ª–µ–º–∞ failed: ${createError.error || createError.details}`);
      }

    } catch (error) {
      addTestResult(`‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–±–ª–µ–º: ${error}`);
    }

    setIsLoading(false);
  };

  const testEntityRelationships = async () => {
    setIsLoading(true);
    addTestResult("üîó –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–≤—è–∑–µ–π –º–µ–∂–¥—É —Å—É—â–Ω–æ—Å—Ç—è–º–∏...");

    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–≤—è–∑—å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞-–ø—Ä–æ–±–ª–µ–º—ã
      if (devices.length > 0) {
        const deviceWithProblems = await fetch(`/api/v1/devices/${devices[0].id}?include_stats=true`);
        if (deviceWithProblems.ok) {
          const data = await deviceWithProblems.json();
          addTestResult(`‚úÖ –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ ${devices[0].name}: –Ω–∞–π–¥–µ–Ω–æ ${data.data?.problems_count || 0} –ø—Ä–æ–±–ª–µ–º`);
        }
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ–±–ª–µ–º—ã –ø–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤—É
      if (devices.length > 0) {
        const problemsByDevice = await fetch(`/api/v1/problems?device_id=${devices[0].id}`);
        if (problemsByDevice.ok) {
          const data = await problemsByDevice.json();
          addTestResult(`‚úÖ –ü—Ä–æ–±–ª–µ–º—ã –¥–ª—è ${devices[0].name}: ${data.data?.length || 0} –Ω–∞–π–¥–µ–Ω–æ`);
        }
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —à–∞–≥–∏ –ø–æ –ø—Ä–æ–±–ª–µ–º–∞–º
      if (problems.length > 0) {
        const stepsByProblem = await fetch(`/api/v1/steps?problem_id=${problems[0].id}`);
        if (stepsByProblem.ok) {
          const data = await stepsByProblem.json();
          addTestResult(`‚úÖ –®–∞–≥–∏ –¥–ª—è –ø—Ä–æ–±–ª–µ–º—ã ${problems[0].title}: ${data.data?.length || 0} –Ω–∞–π–¥–µ–Ω–æ`);
        }
      }

    } catch (error) {
      addTestResult(`‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–≤—è–∑–µ–π: ${error}`);
    }

    setIsLoading(false);
  };

  const clearResults = () => {
    setTestResults([]);
  };

  return (
    <Card className="w-full">
      <CardHeader>
        <CardTitle className="flex items-center">
          <CheckCircle className="h-5 w-5 mr-2" />
          –ü–∞–Ω–µ–ª—å —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è CRUD –æ–ø–µ—Ä–∞—Ü–∏–π
        </CardTitle>
      </CardHeader>
      <CardContent className="space-y-4">
        {/* –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–µ–∫—É—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö */}
        <div className="grid grid-cols-3 gap-4 mb-4">
          <div className="text-center">
            <div className="text-2xl font-bold text-blue-600">{devices.length}</div>
            <div className="text-sm text-gray-600">–£—Å—Ç—Ä–æ–π—Å—Ç–≤</div>
          </div>
          <div className="text-center">
            <div className="text-2xl font-bold text-orange-600">{problems.length}</div>
            <div className="text-sm text-gray-600">–ü—Ä–æ–±–ª–µ–º</div>
          </div>
          <div className="text-center">
            <div className="text-2xl font-bold text-green-600">0</div>
            <div className="text-sm text-gray-600">–®–∞–≥–æ–≤</div>
          </div>
        </div>

        {/* –ö–Ω–æ–ø–∫–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è */}
        <div className="grid grid-cols-2 gap-2">
          <Button 
            onClick={testDeviceOperations} 
            disabled={isLoading}
            variant="outline"
          >
            <Plus className="h-4 w-4 mr-2" />
            –¢–µ—Å—Ç –£—Å—Ç—Ä–æ–π—Å—Ç–≤
          </Button>
          <Button 
            onClick={testProblemOperations} 
            disabled={isLoading}
            variant="outline"
          >
            <Edit className="h-4 w-4 mr-2" />
            –¢–µ—Å—Ç –ü—Ä–æ–±–ª–µ–º
          </Button>
          <Button 
            onClick={testEntityRelationships} 
            disabled={isLoading}
            variant="outline"
            className="col-span-2"
          >
            <AlertCircle className="h-4 w-4 mr-2" />
            –¢–µ—Å—Ç –°–≤—è–∑–µ–π
          </Button>
        </div>

        {/* –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è */}
        <div className="space-y-2">
          <div className="flex justify-between items-center">
            <Label>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:</Label>
            <Button onClick={clearResults} variant="ghost" size="sm">
              –û—á–∏—Å—Ç–∏—Ç—å
            </Button>
          </div>
          <div className="max-h-40 overflow-y-auto bg-gray-50 p-3 rounded text-sm">
            {testResults.length === 0 ? (
              <div className="text-gray-500">–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫–∏ –≤—ã—à–µ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è CRUD –æ–ø–µ—Ä–∞—Ü–∏–π</div>
            ) : (
              testResults.map((result, index) => (
                <div key={index} className="mb-1">{result}</div>
              ))
            )}
          </div>
        </div>
      </CardContent>
    </Card>
  );
};

export default CRUDTestPanel;
